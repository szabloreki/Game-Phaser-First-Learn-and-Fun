
function player(){
    
    
    
    player = game.add.sprite(32, game.world.height - 900, 'dude');

    //  We need to enable physics on the player
    game.physics.arcade.enable(player);

    //  Player physics properties. Give the little guy a slight bounce.
    player.body.bounce.y = 0.2;
    player.body.gravity.y = 300;
    player.body.collideWorldBounds = true;

    //  Our two animations, walking left and right.
    player.animations.add('left', [0, 1, 2, 3], 10, true);
    player.animations.add('right', [5, 6, 7, 8], 10, true);
}
    
function enemy(){
    
    enemies = game.add.group();
    enemies.enableBody = true;
    
    
    

    
    for(var i =0; i<150; i++){
        
    var enemy = enemies.create(60*i+1,game.world.height-110*(1+15*i),'dude');
    
    enemy.body.gravity.y = 100;
        
    
    enemy.animations.add('left',[0, 1, 2, 3],4, true);
    enemy.animations.add('right',[5, 6, 7, 8],4, true);
        
        
        
        
    
        
        

   }   for(var i =0; i<150; i++){
        
    var enemy = enemies.create(60*i+1,game.world.height-110*i,'dude');
    
    enemy.body.gravity.y = 200;
        
    
    enemy.animations.add('left',[0, 1, 2, 3],4, true);
    enemy.animations.add('right',[5, 6, 7, 8],4, true);
        
        
        
        
    
        
        

   }
        
        
         
       ENEMY.create_array();
        
    }

var ENEMY = {
    
    
    
    status: [],
    
    
    status2: [],
    
    
    speed: [],
    
    
    
    create_array: function(){
        
        
        
        
        
        for(var i=0; i<enemies.length;i++){
            this.status.push(true);
            
            this.status2.push(false);
            
            
            this.speed.push(80)
        }
    },
    
    
    
    enemy_movement: function(FromCHildren,Tochildren,speed,fromPos,toPos){
        
        for(var i =FromCHildren;i<Tochildren;i++){
            
            
                
        if(this.status[i] == true){
            
            
            if(enemies.children[i].position.x >toPos){
                this.speed[i] =- speed;
                this.status[i] = false;
                this.status2[i] = true;
            }
            
            
        }
            
            // if V enemy > 0 [on right]  else [on left] = animation
            if(this.speed[i] >0){
                enemies.children[i].animations.play('right');
                enemies.children[i].animations.play('right');
            }
            else{enemies.children[i].animations.play('left');}
            
            
        if(this.status2[i]  == true){
            
            if(enemies.children[i].position.x<fromPos){
                this.speed[i] =speed;
                this.status[i] = true;
                this.status2[i] = false;



                
            }
            
            
        }
            
        
            enemies.children[i].body.velocity.x = this.speed[i];     
        }
            
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
    
    
    
    
    
    
    
    
    
}
 
    

    
   //   if (a1 <=LEFT)
   // {
        //  Move to the left
       // enemy.body.velocity.x = -150;

       // enemy.animations.play('left');
    //}else 
function player_movement(){
    var hitPlatforms = game.physics.arcade.collide(player,PLATFORMS.platforms);

    cursors = game.input.keyboard.createCursorKeys();
    
        player.body.velocity.x =0;
    
    
     if (cursors.left.isDown)
    {
        //  Move to the left
        player.body.velocity.x = -150;

        player.animations.play('left');
    }
    else if (cursors.right.isDown)
    {
        //  Move to the right
        player.body.velocity.x = 150;

        player.animations.play('right');
    }
    else
    {
        //  Stand still
        player.animations.stop();

        player.frame = 4;
    }

    if(cursors.up.isDown && player.body.touching.down &&hitPlatforms){
        player.body.velocity.y -=350;
        
    }
    
    
    
    
} 
    
    
    //standing
    

var PLATFORMS = {
     platforms :null,
     
    createPlatform: function(){
        
        this.platforms = game.add.group();

        this.platforms.enableBody = true;
    },
      
      
    move: {
     speedX:[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60],
     speedY:[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60],// od 0 do 17 //czyli 18
   
    
    	that: this,
    
     X: function(index,FROM,TO,speed){
    
    
        that.platforms.children[index].body.velocity.x = this.speedX[index];
        
        if(that.platforms.children[index].body.position.x >TO){
                this.speedX[index] = -speed;

        }
        if(that.platforms.children[index].body.position.x <FROM){
                this.speedX[index] = -speed;
        }
    },
    
    Y: function(index,FROM,TO,speed){
    
    
        that.platforms.children[index].body.velocity.y = this.speedY[index];
        
        if(that.platforms.children[index].body.position.y >TO){
                this.speedY[index] = -speed;

        }
        if(that.platforms.children[index].body.position.y <FROM){
                this.speedY[index] = -speed;
        }
    }
      
	},
    // Game Elements to set up on scene
    // Here we create the ground.
        set_platform: function(getFromX,getFromY,scaleWidth,scaleHeight){
        var ledge = this.platforms.create(getFromX,game.world.height - getFromY, 'ground');
        ledge.body.immovable = true;
        ledge.scale.setTo(scaleWidth,scaleHeight);





        var ledge = this.platforms.create(400, 400, 'ground');
        ledge.body.immovable = true;



        ledge = this.platforms.create(-150, 250, 'ground');
        ledge.body.immovable = true;


        var ground = this.platforms.create(0, game.world.height - 200, 'ground');

        //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
        ground.scale.setTo(2, 2);

        //  This stops it from falling away when you jump on it
        ground.body.immovable = true;

        //  Now let's create two ledges

    
    
}
}








function STAR(){

  stars = game.add.group();

    //  We will enable physics for any star that is created in this group
    stars.enableBody = true;

    //  Here we'll create 12 of them evenly spaced apart
    for (var i = 0; i < 100; i++)
    {
        //  Create a star inside of the 'stars' group
        var star = stars.create(i * 70, 0, 'star');

        //  Let gravity do its thing
        star.body.gravity.y = 5;

        //  This just gives each star a slightly random bounce value
        star.body.bounce.y = 0.7 + Math.random() * 0.2;
    }
    
     for (var i = 0; i < 100; i++)
    {
        //  Create a star inside of the 'stars' group
        var star = stars.create(i * 70, game.world.height-400, 'star');

        //  Let gravity do its thing
        star.body.gravity.y = 5;

        //  This just gives each star a slightly random bounce value
        star.body.bounce.y = 0.7 + Math.random() * 0.2;
    }

    scoreText = game.add.text(16,16,'score: 0',{fontSize: '32px',fill: '#000'});
    
    
       var snd = game.add.audio('soundtrack');
               snd.play();



}



function GameColision(){
     game.physics.arcade.collide(stars, PLATFORMS.platforms);
    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
    game.physics.arcade.overlap(player, stars, collectStar, null, this);

    game.physics.arcade.collide(enemies,PLATFORMS.platforms);    
    game.physics.arcade.overlap(player,enemies,enemiesHit,null,this);
    
    
    
    
        function collectStar (player, star) {
    
    // Removes the star from the screen
    var snd = game.add.audio('coin');
    snd.play();
    star.kill();
    
        
        
        // mozna uzyc star velocity a wiec moge zrobic, ze to sa enemy i trza zrobic //tabice directionX która bedzie przechowywac kierunek  enemy do kazdego osobna //wiec petla ,for któa ustala wartosc do kazdego potem enemy_monement któy //tablica wszystkie przesuwa, ale wczesniej sprawdza kolizje kazdej i jezeli //zkolidowala z jakas to ,tej zmienia velocity;
        
    score += 10;
    scoreText.text = 'Score: ' + score;



    
    }
    
    
    
    
    
    
    
          function enemiesHit(player,enemies){
           if(player.position.y < enemies.body.position.y){
               
                enemies.kill();

           }
           else{
               
               
               player.kill();
               var snd = game.add.audio('hit');
               snd.play();
           }
    }

    
    
    
    
    
    
    
    
    
    
    
    
}




var GameInterface = {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}


//CO TRZEBA ZROBIĆ:



/*



1.Object platform, który zawiera metody ustawiające i poruszające danymi platforami;



platfrom = {
        
        
        
        
        
        
        set_platform()
        
        
        
        
        
        
        
}


obj.move_with_arrange.x or obj.move_with_arrange(x,y,number, LATE: UPDATE: (FROM TO)
obj.move_with_arrange.y
obj.set_platform(X,Y,hight,width scale itd......'graphics, chosen);





*/
































