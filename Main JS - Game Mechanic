<!doctype html> 
<html lang="en"> 
<head> 
	<meta charset="UTF-8" />
    <title>Phaser - Making your first game, part 5</title>
	<script type="text/javascript" src="js/phaser.min.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<script type="text/javascript">

var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });

function preload() {

    game.load.image('sky', 'assets/sky.png');
    game.load.image('ground', 'assets/platform.png');
    game.load.image('star', 'assets/star.png');
    game.load.image('dark', 'assets/dark.png');
    game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
    game.load.image('enemyColisionBlock', 'assets/enemy_colision_block.png');

}
var platforms;
var cursors;
var stars;
var index =1;
var enemyColisionsBlocks;
    
    
var score =0;
var scoreText;
    
    
    
var enemy_speed_direction = 50;
    
    
var enemies;
var direction = 100;
    
    
    
//AI
    

    
    

    
    
function player(){
    
    
    
    player = game.add.sprite(32, game.world.height - 900, 'dude');

    //  We need to enable physics on the player
    game.physics.arcade.enable(player);

    //  Player physics properties. Give the little guy a slight bounce.
    player.body.bounce.y = 0.2;
    player.body.gravity.y = 300;
    player.body.collideWorldBounds = true;

    //  Our two animations, walking left and right.
    player.animations.add('left', [0, 1, 2, 3], 10, true);
    player.animations.add('right', [5, 6, 7, 8], 10, true);
}
 
    
    
    
  
    
    
    
    
    
    
    
function enemy(){
    
    enemies = game.add.group();
    enemies.enableBody = true;
    
    
    

    
    for(var i =0; i<10; i++){
        
    var enemy = enemies.create(60*i+1,game.world.height-110*(2+20*i),'dude');
    
    enemy.body.gravity.y = 100;
        
    
    enemy.animations.add('left',[0, 1, 2, 3],4, true);
    enemy.animations.add('right',[5, 6, 7, 8],4, true);
        
        
        
        
    
        
        

   }
        
        
         
       enemy_directions.create_array();
     
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    
    
        
 
    
    
    
    
    
    
    
    
    

        
    
        
    }
    
    
    
    

    
    
     
    
    
  
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
         var ENEMY = {
        
        
        b: function(direction){
            
            var dir = direction;
            console.log(dir);
            enemy.body.velocity.x = dir;
            enemy.animations.play('right');
        },
        
        
        
        direction: 150
        
        
        
        
        
        
        
    }    
     
    
    
    
    
    
var enemy_directions = {
    
    
    
    status: [],
    
    
    status2: [],
    
    
    speed: [],
    
    
    
    create_array: function(){
        
        
        
        
        
        for(var i=0; i<enemies.length;i++){
            this.status.push(true);
            
            this.status2.push(false);
            
            
            this.speed.push(80)
            
            
            console.log(this.status);
            console.log(this.status2);
            console.log(this.speed);
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
    
    
    
    
    
    
}
    


    

    
    
    
    
    
    
    
function enemy_movement(FromCHildren,Tochildren,speed,fromPos,toPos){
    
    
    
    
    
    
        for(var i =FromCHildren;i<Tochildren;i++){
            
            
                
        if(enemy_directions.status[i] == true){
            
            
            if(enemies.children[i].position.x >toPos){
                enemy_directions.speed[i] =- speed;
                enemy_directions.status[i] = false;
                enemy_directions.status2[i] = true;
            }
            
            
        }
            
            // if V enemy > 0 [on right]  else [on left] = animation
            if(enemy_directions.speed[i] >0){
                enemies.children[i].animations.play('right');
                enemies.children[i].animations.play('right');
            }
            else{enemies.children[i].animations.play('left');}
            
            
        if(enemy_directions.status2[i]  == true){
            
            if(enemies.children[i].position.x<fromPos){
                enemy_directions.speed[i] =speed;
                enemy_directions.status[i] = true;
                enemy_directions.status2[i] = false;



                
            }
            
            
        }
            
        
            console.log(enemy_directions.speed)
            enemies.children[i].body.velocity.x = enemy_directions.speed[i];
            
            
            
            
            
            
            
        }
            
    
    
    
    
    
    
    
    
            }
    
    
    
    
    
    
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   //   if (a1 <=LEFT)
   // {
        //  Move to the left
       // enemy.body.velocity.x = -150;

       // enemy.animations.play('left');
    //}else 

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

function player_movement(){
    var hitPlatforms = game.physics.arcade.collide(player,platforms);
    cursors = game.input.keyboard.createCursorKeys();
    
        player.body.velocity.x =0;
    
    
     if (cursors.left.isDown)
    {
        //  Move to the left
        player.body.velocity.x = -150;

        player.animations.play('left');
    }
    else if (cursors.right.isDown)
    {
        //  Move to the right
        player.body.velocity.x = 150;

        player.animations.play('right');
    }
    else
    {
        //  Stand still
        player.animations.stop();

        player.frame = 4;
    }

    if(cursors.up.isDown && player.body.touching.down &&hitPlatforms){
        player.body.velocity.y -=350;
        
    }
    
    
    
    
    
    
    
    
    
    
    
} 
function platform(){
    
    
    
    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = game.add.group();

    //  We will enable physics for any object that is created in this group
    platforms.enableBody = true;

    // Here we create the ground.
    var ground = platforms.create(0, game.world.height - 64, 'ground');

    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    ground.scale.setTo(2, 2);

    //  This stops it from falling away when you jump on it
    ground.body.immovable = true;

    //  Now let's create two ledges
    var ledge = platforms.create(400, 400, 'ground');
    ledge.body.immovable = true;

    ledge = platforms.create(-150, 250, 'ground');
    ledge.body.immovable = true;
}
    
function EnemyColisionsBlocks(){
    
 enemyColisionsBlocks = game.add.group();
    
    
    
    enemyColisionsBlocks.enableBody = true;
    
    
    
    
    
    
    
    var enemyColisionBlock1 = enemyColisionsBlocks.create(180,game.world.height-89,'enemyColisionBlock')
            enemyColisionBlock1.body.velocity.x = -10;
    
    
    
    
    
    var enemyColisionBlock2 = enemyColisionsBlocks.create(700,game.world.height-89,'enemyColisionBlock')
            enemyColisionBlock2.body.velocity.x = -10;

    
    
    
    
    
    
    


}    
    
    
    
    

function create() {
    //  We're going to be using physics, so enable the Arcade Physics system
    
    

    
    
    game.physics.startSystem(Phaser.Physics.ARCADE);

    //  A simple background for our game
    game.add.sprite(0, 0, 'sky');
    
    
    
    

    platform();
    player();
    game.camera.follow(player);

    
    
    enemy();
    
    
    
     stars = game.add.group();

    //  We will enable physics for any star that is created in this group
    stars.enableBody = true;

    //  Here we'll create 12 of them evenly spaced apart
    for (var i = 0; i < 12; i++)
    {
        //  Create a star inside of the 'stars' group
        var star = stars.create(i * 70, 0, 'star');

        //  Let gravity do its thing
        star.body.gravity.y = 300;

        //  This just gives each star a slightly random bounce value
        star.body.bounce.y = 0.7 + Math.random() * 0.2;
    }
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    scoreText = game.add.text(16,16,'score: 0',{fontSize: '32px',fill: '#000'});

}
    
    
    
    
    
    
    
    

    

function update() {
    game.physics.arcade.collide(stars, platforms);
    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
    game.physics.arcade.overlap(player, stars, collectStar, null, this);

    game.physics.arcade.collide(enemies,platforms);
    
    
    
    
    player_movement();
    
    
    

    
    //scene
  
    enemy_movement(0,1,25,0,200);
    enemy_movement(1,3,45,200,400);
    enemy_movement(3,6,65,400,600);
    enemy_movement(6,9,75,600,700);
    enemy_movement(9,10,140,-10,710);
    
    
    
    
    
    
    
    
  
    
    function collectStar (player, star) {
    
    // Removes the star from the screen
    star.kill();
    
        
        
        // mozna uzyc star velocity a więc mogę zrobić, ze to są enemy i trza zrobić //tabicę directionX która będzie przechowywać kierunek  enemy do każdego osobną //więc pętla ,for któa ustala wartość do każdego potem enemy_monement któy //tablicą wszystkie przesuwa, ale wcześniej sprawdza kolizję każdej i jeżeli //zkolidowała z jakąs to ,tej zmienia velocity i wyłącza opcję kolizji[dla danego objectu] dopóki nie zakoliduje z innej strony wtedy ją wyłączą i włącza poprzednią;
    star.body.velocity.x = 
        
    score += 10;
    scoreText.text = 'Score: ' + score;



    
    }
    
    
    
  
    

    
    
    

    
    
    
    
    
}

</script>

</body>
</html>
